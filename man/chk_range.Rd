% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chk-range.R
\name{chk_range}
\alias{chk_range}
\alias{chk_lt}
\alias{chk_lte}
\alias{chk_gt}
\alias{chk_gte}
\title{Check Range}
\usage{
chk_range(x, range = c(0, 1), err = TRUE, x_name = NULL)

chk_lt(x, value = 0, err = TRUE, x_name = NULL)

chk_lte(x, value = 0, err = TRUE, x_name = NULL)

chk_gt(x, value = 0, err = TRUE, x_name = NULL)

chk_gte(x, value = 0, err = TRUE, x_name = NULL)
}
\arguments{
\item{x}{The object to check.}

\item{range}{A vector of length 2 of the lower and upper permitted values.}

\item{err}{A flag specifying whether to generate an error
message if the check fails.}

\item{x_name}{A string of the name of object x or NULL.}

\item{value}{A non-missing scalar of a value.}
}
\value{
TRUE if passes check. Otherwise if throws an informative error unless
\code{err = FALSE} in which case it returns FALSE.
}
\description{
Checks range of non-missing values.
}
\details{
\code{chk_range()}: Check Range

Checks if all non-missing values fall within range using:

\code{all(x[!is.na(x)] >= range[1] & x[!is.na(x)] <= range[2])}

Range should be a non-missing sorted vector of length 2.
}
\section{Functions}{
\itemize{
\item \code{chk_lt}: Check Less Than

Checks if all non-missing values are less than value using:

\code{all(x[!is.na(x)] < value))}

\code{value} should be a non-missing scalar.

\item \code{chk_lte}: Check Less Than or Equal To

Checks if all non-missing values are less than or equal to y using:

\code{all(x[!is.na(x)] <= value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gt}: Check Greater Than

Checks if all non-missing values are greater than value using:

\code{all(x[!is.na(x)] > value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gte}: Check Greater Than or Equal To

Checks if all non-missing values are greater than or equal to y using:

\code{all(x[!is.na(x)] >= value))}

\code{value} should be a non-missing scalar.
}}

\examples{

# chk_range
chk_range(numeric(0))
chk_range(0)
try(chk_range(-0.1))
chk_range(c(0.1, 0.2, NA))
chk_range(c(0.1, 0.2, NA), range = c(0,1))


# chk_lt
chk_lt(numeric(0))
try(chk_lt(0))
chk_lt(-0.1)
chk_lt(c(-0.1, -0.2, NA))
try(chk_lt(c(-0.1, 0.2)))
chk_lt(c(-0.1, 0.2), value = 1)
chk_lt("a", value = "b")
 

# chk_lte
chk_lte(numeric(0))
chk_lte(0)
try(chk_lte(0.1))
chk_lte(c(-0.1, -0.2, NA))
try(chk_lte(c(-0.1, -0.2, NA), value = -1))
 

# chk_gt
chk_gt(numeric(0))
try(chk_gt(0))
chk_gt(0.1)
chk_gt(c(0.1, 0.2, NA))
try(chk_gt(c(0.1, -0.2)))
chk_gt(c(-0.1, 0.2), value = -1)
chk_gt("b", value = "a")
 

# chk_gte
chk_gte(numeric(0))
chk_gte(0)
try(chk_gte(-0.1))
chk_gte(c(0.1, 0.2, NA))
try(chk_gte(c(0.1, 0.2, NA), value = 1))
 
}
