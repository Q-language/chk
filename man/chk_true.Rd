% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chk.R
\name{chk_true}
\alias{chk_true}
\alias{chk}
\alias{chk_false}
\alias{chk_flag}
\alias{chk_lgl}
\alias{chk_number}
\alias{chk_proportion}
\alias{chk_whole_number}
\alias{chk_count}
\alias{chk_string}
\alias{chk_date}
\alias{chk_datetime}
\alias{chk_length}
\alias{chk_whole_numeric}
\alias{chk_grepl}
\alias{chk_no_missing}
\alias{chk_unique}
\alias{chk_null}
\alias{chk_not_null}
\alias{chk_named}
\alias{chk_unused}
\alias{chk_used}
\alias{chk_function}
\alias{chk_is}
\alias{chk_identical}
\alias{chk_equal}
\alias{chk_equivalent}
\alias{chk_lt}
\alias{chk_lte}
\alias{chk_gt}
\alias{chk_gte}
\alias{chk_range}
\alias{chk_in}
\alias{chk_dir}
\alias{chk_dirs}
\alias{chk_file}
\alias{chk_files}
\title{Check Object}
\usage{
chk_true(x, err = TRUE)

chk_false(x, err = TRUE)

chk_flag(x, err = TRUE)

chk_lgl(x, err = TRUE)

chk_number(x, err = TRUE)

chk_proportion(x, err = TRUE)

chk_whole_number(x, err = TRUE)

chk_count(x, err = TRUE)

chk_string(x, err = TRUE)

chk_date(x, err = TRUE)

chk_datetime(x, err = TRUE)

chk_length(x, length = 1L, err = TRUE)

chk_whole_numeric(x, err = TRUE)

chk_grepl(x, pattern = ".+", err = TRUE)

chk_no_missing(x, err = TRUE)

chk_unique(x, err = TRUE)

chk_null(x, err = TRUE)

chk_not_null(x, err = TRUE)

chk_named(x, err = TRUE)

chk_unused(..., err = TRUE)

chk_used(..., err = TRUE)

chk_function(x, err = TRUE)

chk_is(x, class, err = TRUE)

chk_identical(x, y, err = TRUE)

chk_equal(x, y, tolerance = sqrt(.Machine$double.eps), err = TRUE)

chk_equivalent(x, y, tolerance = sqrt(.Machine$double.eps), err = TRUE)

chk_lt(x, value = 0, err = TRUE)

chk_lte(x, value = 0, err = TRUE)

chk_gt(x, value = 0, err = TRUE)

chk_gte(x, value = 0, err = TRUE)

chk_range(x, range = c(0, Inf), err = TRUE)

chk_in(x, values = c(0, Inf), err = TRUE)

chk_dir(x, err = TRUE)

chk_dirs(x, err = TRUE)

chk_file(x, err = TRUE)

chk_files(x, err = TRUE)
}
\arguments{
\item{x}{The object to check.}

\item{err}{A flag specifying whether to generate an error
message if the check fails.}

\item{length}{A count of the length.}

\item{pattern}{A string of a regular expression.}

\item{...}{Additional arguments.}

\item{class}{A string specifying the class.}

\item{y}{An object to check against.}

\item{tolerance}{A non-negative numeric scalar.}

\item{value}{A non-missing scalar of a value.}

\item{range}{A vector of length 2 of the lower and upper permitted values.}

\item{values}{A vector of the permitted values.}
}
\value{
TRUE if passes check. Otherwise if throws an informative error unless
\code{err = FALSE} in which case it returns FALSE.
}
\description{
Efficiently checks object.
}
\details{
\code{chk_true()}: Check TRUE

Checks if TRUE using:

\code{\link{isTRUE}(x)}
}
\section{Functions}{
\itemize{
\item \code{chk_false}: Check FALSE

Checks if FALSE using:

\code{\link{isFALSE}(x)}

\item \code{chk_flag}: Check Flag

Checks if non-missing logical scalar using:

\code{is.logical(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_lgl}: Check Lgl

Checks if logical scalar using:

\code{is.logical(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_number}: Check Number

Checks if non-mising numeric scalar using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_proportion}: Check Proportion

Checks if non-mising numeric scalar between 0 and 1 using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && x >= 0 && x <= 1}

\item \code{chk_whole_number}: Check Whole Number
 
Checks if non-mising integer scalar or double equivalent using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && 
  (is.integer(x) || isTRUE(all.equal(x, as.integer(x))))}

\item \code{chk_count}: Check Count
 
Checks if non-missing non-negative integer scalar or double equivalent using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && x >= 0 && 
  isTRUE(all.equal(x, as.integer(x)))}

\item \code{chk_string}: Check String

Checks if non-missing character scalar using:

\code{is.character(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_date}: Check String

Checks if non-missing Date scalar using:

\code{inherits(x, "Date") && length(x) == 1L && !anyNA(x)}

\item \code{chk_datetime}: Check DateTime

Checks if non-missing POSIXct scalar using:

\code{inherits(x, "POSIXct") && length(x) == 1L && !anyNA(x)}

\item \code{chk_length}: Check Length

Checks if is length length using:

\code{length(x) == length}

\code{length} should be a count.

\item \code{chk_whole_numeric}: Check Whole Numeric
 
Checks if integer vector or double equivalent using the equivalent of:

\code{is.integer(x) || (is.double(x) && isTRUE(all.equal(x, as.integer(x))))}

\item \code{chk_grepl}: Check Matches Regular Expression

Checks if all values match regular expression pattern using:

\code{all(\link{grepl}(pattern, x))}

\code{pattern} should be a non-missing character scalar.

\item \code{chk_no_missing}: Check No Missing Values

Checks if no missing values using:

\code{!\link{anyNA}(x)}

\item \code{chk_unique}: Check Unique

Checks if unique using:

\code{!\link{anyDuplicated}(x)}

\item \code{chk_null}: Check NULL

Checks if NULL using:

\code{\link{is.null}(x)}

\item \code{chk_not_null}: Check Not NULL

Checks if not NULL using:

\code{!\link{is.null}(x)}

\item \code{chk_named}: Check Named

Checks if is named using:

\code{!is.null(\link{names}(x))}

\item \code{chk_unused}: Check ... Unused

Checks if is ... unused using:

\code{!length(\link{list}(...))}

\item \code{chk_used}: Check ... Used

Checks if is ... used using:

\code{length(\link{list}(...))}

\item \code{chk_function}: Check Function

Checks if is a function using:

\code{\link{is.function}(x)}

\item \code{chk_is}: Check Is

Checks if inherits from class using:

\code{\link{inherits}(x, class)}

Class should be a string.

\item \code{chk_identical}: Check Identical

Checks if is identical to y using:

\code{\link{identical}(x, y)}

\item \code{chk_equal}: Check Equal

Checks if is equal (identical within tolerance) to y using:

\code{isTRUE(\link{all.equal}(x, y, tolerance))}

\item \code{chk_equivalent}: Check Equivalent

Checks if is equivalent (equal ignoring attributes) to y using:

\code{\link{isTRUE}(\link{all.equal}(x, y, tolerance, check.attributes = FALSE))}

\item \code{chk_lt}: Check Less Than

Checks if all non-missing values are less than value using:

\code{all(x[!is.na(x)] < value))}

\code{value} should be a non-missing scalar.

\item \code{chk_lte}: Check Less Than or Equal To

Checks if all non-missing values are less than or equal to y using:

\code{all(x[!is.na(x)] <= value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gt}: Check Greater Than

Checks if all non-missing values are greater than value using:

\code{all(x[!is.na(x)] > value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gte}: Check Greater Than or Equal To

Checks if all non-missing values are greater than or equal to y using:

\code{all(x[!is.na(x)] >= value))}

\code{value} should be a non-missing scalar.

\item \code{chk_range}: Check Range

Checks if all non-missing values fall within range using:

\code{all(x[!is.na(x)] >= range[1] & x[!is.na(x)] <= range[2])}

Range should be a non-mising sorted vector of length 2.

\item \code{chk_in}: Check In

Checks if all values in values using equivalent of:

\code{all(\link{match}(x, values, nomatch = 0) > 0)}

\item \code{chk_dir}: Check Directory Exists

Checks if directory exist using:

\code{length(x) == 1L && \link{dir.exists}(x))}

\item \code{chk_dirs}: Check Directories Exist

Checks if directories exist using:

\code{all(\link{dir.exists}(x))}

\item \code{chk_file}: Check File Exists

Checks if file exists using:

\code{length(x) == 1L & \link{file.exists}(x) && !dir.exists(x)}

\item \code{chk_files}: Check Files Exist

Checks if files exist using:

\code{all(\link{file.exists}(x) && !dir.exists(x))}
}}

\examples{

# chk_true
chk_true(1, err = FALSE)
chk_true(NA, err = FALSE)
chk_true(FALSE, err = FALSE)
chk_true(TRUE)
chk_true(c(TRUE, TRUE), err = FALSE)

# chk_false
chk_false(0, err = FALSE)
chk_false(NA, err = FALSE)
chk_false(TRUE, err = FALSE)
chk_false(FALSE)
chk_false(c(FALSE, FALSE), err = FALSE)


# chk_flag
chk_flag(1, err = FALSE)
chk_flag(NA, err = FALSE)
chk_flag(TRUE)
chk_flag(FALSE)
chk_flag(c(TRUE, TRUE), err = FALSE)


# chk_lgl
chk_lgl(1, err = FALSE)
chk_lgl(NA)
chk_lgl(TRUE)
chk_lgl(FALSE)
chk_lgl(c(TRUE, TRUE), err = FALSE)


# chk_unique
chk_unique(NA)
chk_unique(c(NA, NA), err = FALSE)
}
