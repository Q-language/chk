% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chk.R, R/deprecated.R
\name{chk_true}
\alias{chk_true}
\alias{chk}
\alias{chk_false}
\alias{chk_flag}
\alias{chk_lgl}
\alias{chk_number}
\alias{chk_proportion}
\alias{chk_whole_number}
\alias{chk_count}
\alias{chk_string}
\alias{chk_date}
\alias{chk_datetime}
\alias{chk_length}
\alias{chk_whole_numeric}
\alias{chk_no_missing}
\alias{chk_unique}
\alias{chk_null}
\alias{chk_not_null}
\alias{chk_named}
\alias{chk_unused}
\alias{chk_used}
\alias{chk_function}
\alias{chk_list}
\alias{chk_is}
\alias{chk_identical}
\alias{chk_equal}
\alias{chk_equivalent}
\alias{chk_all_identical}
\alias{chk_all}
\alias{chk_lt}
\alias{chk_lte}
\alias{chk_gt}
\alias{chk_gte}
\alias{chk_range}
\alias{chk_in}
\alias{chk_match}
\alias{chk_dir}
\alias{chk_file}
\alias{chk_dirs}
\alias{chk_files}
\title{Check Object}
\usage{
chk_true(x, err = TRUE, x_name = NULL)

chk_false(x, err = TRUE, x_name = NULL)

chk_flag(x, err = TRUE, x_name = NULL)

chk_lgl(x, err = TRUE, x_name = NULL)

chk_number(x, err = TRUE, x_name = NULL)

chk_proportion(x, err = TRUE, x_name = NULL)

chk_whole_number(x, err = TRUE, x_name = NULL)

chk_count(x, err = TRUE, x_name = NULL)

chk_string(x, err = TRUE, x_name = NULL)

chk_date(x, err = TRUE, x_name = NULL)

chk_datetime(x, err = TRUE, x_name = NULL)

chk_length(x, length = 1L, err = TRUE, x_name = NULL)

chk_whole_numeric(x, err = TRUE, x_name = NULL)

chk_no_missing(x, err = TRUE, x_name = NULL)

chk_unique(x, incomparables = FALSE, err = TRUE, x_name = NULL)

chk_null(x, err = TRUE, x_name = NULL)

chk_not_null(x, err = TRUE, x_name = NULL)

chk_named(x, err = TRUE, x_name = NULL)

chk_unused(..., err = TRUE)

chk_used(..., err = TRUE)

chk_function(x, err = TRUE, x_name = NULL)

chk_list(x, err = TRUE, x_name = NULL)

chk_is(x, class, err = TRUE, x_name = NULL)

chk_identical(x, y, err = TRUE, x_name = NULL)

chk_equal(x, y, tolerance = sqrt(.Machine$double.eps), err = TRUE,
  x_name = NULL)

chk_equivalent(x, y, tolerance = sqrt(.Machine$double.eps), err = TRUE,
  x_name = NULL)

chk_all_identical(x, err = TRUE, x_name = NULL)

chk_all(x, chk_fun, ..., err = TRUE, x_name = NULL)

chk_lt(x, value = 0, err = TRUE, x_name = NULL)

chk_lte(x, value = 0, err = TRUE, x_name = NULL)

chk_gt(x, value = 0, err = TRUE, x_name = NULL)

chk_gte(x, value = 0, err = TRUE, x_name = NULL)

chk_range(x, range = c(0, Inf), err = TRUE, x_name = NULL)

chk_in(x, values = c(0, 1, NA), err = TRUE, x_name = NULL)

chk_match(x, regexp = ".+", err = TRUE, x_name = NULL)

chk_dir(x, err = TRUE)

chk_file(x, err = TRUE)

chk_dirs(x, err = TRUE)

chk_files(x, err = TRUE)
}
\arguments{
\item{x}{The object to check.}

\item{err}{A flag specifying whether to generate an error
message if the check fails.}

\item{x_name}{A string of the name of object x or NULL.}

\item{length}{A count of the length.}

\item{incomparables}{A vector of values that cannot be compared.
FALSE means that all values can be compared.}

\item{...}{Additional arguments.}

\item{class}{A string specifying the class.}

\item{y}{An object to check against.}

\item{tolerance}{A non-negative numeric scalar.}

\item{chk_fun}{A chk function.}

\item{value}{A non-missing scalar of a value.}

\item{range}{A vector of length 2 of the lower and upper permitted values.}

\item{values}{A vector of the permitted values.}

\item{regexp}{A string of a regular expression.}
}
\value{
TRUE if passes check. Otherwise if throws an informative error unless
\code{err = FALSE} in which case it returns FALSE.
}
\description{
Efficiently checks object.
}
\details{
\code{chk_true()}: Check TRUE

Checks if TRUE using:

\code{\link{isTRUE}(x)}
}
\section{Functions}{
\itemize{
\item \code{chk_false}: Check FALSE

Checks if FALSE using:

\code{\link{isFALSE}(x)}

\item \code{chk_flag}: Check Flag

Checks if non-missing logical scalar using:

\code{is.logical(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_lgl}: Check Lgl

Checks if logical scalar using:

\code{is.logical(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_number}: Check Number

Checks if non-missing numeric scalar using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_proportion}: Check Proportion

Checks if non-missing numeric scalar between 0 and 1 using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && x >= 0 && x <= 1}

\item \code{chk_whole_number}: Check Whole Number
 
Checks if non-missing integer scalar or double equivalent using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && 
  (is.integer(x) || isTRUE(all.equal(x, as.integer(x))))}

\item \code{chk_count}: Check Count
 
Checks if non-missing non-negative integer scalar or double equivalent using:

\code{is.numeric(x) && length(x) == 1L && !anyNA(x) && x >= 0 && 
  isTRUE(all.equal(x, as.integer(x)))}

\item \code{chk_string}: Check String

Checks if non-missing character scalar using:

\code{is.character(x) && length(x) == 1L && !anyNA(x)}

\item \code{chk_date}: Check String

Checks if non-missing Date scalar using:

\code{inherits(x, "Date") && length(x) == 1L && !anyNA(x)}

\item \code{chk_datetime}: Check DateTime

Checks if non-missing POSIXct scalar using:

\code{inherits(x, "POSIXct") && length(x) == 1L && !anyNA(x)}

\item \code{chk_length}: Check Length

Checks if is length length using:

\code{length(x) == length}

\code{length} should be a count.

\item \code{chk_whole_numeric}: Check Whole Numeric
 
Checks if integer vector or double equivalent using the equivalent of:

\code{is.integer(x) || (is.double(x) && isTRUE(all.equal(x, as.integer(x))))}

\item \code{chk_no_missing}: Check No Missing Values

Checks if no missing values using:

\code{!\link{anyNA}(x)}

\item \code{chk_unique}: Check Unique

Checks if unique using:

\code{!\link{anyDuplicated}(x, incomparables = incomparables)}

\item \code{chk_null}: Check NULL

Checks if NULL using:

\code{\link{is.null}(x)}

\item \code{chk_not_null}: Check Not NULL

Checks if not NULL using:

\code{!\link{is.null}(x)}

\item \code{chk_named}: Check Named

Checks if is named using:

\code{!is.null(\link{names}(x))}

\item \code{chk_unused}: Check ... Unused

Checks if is ... unused using:

\code{!length(\link{list}(...))}

\item \code{chk_used}: Check ... Used

Checks if is ... used using:

\code{length(\link{list}(...))}

\item \code{chk_function}: Check Function

Checks if is a function using:

\code{\link{is.function}(x)}

\item \code{chk_list}: Check List

Checks if is a list using:

\code{\link{is.list}(x)}

\item \code{chk_is}: Check Is

Checks if inherits from class using:

\code{\link{inherits}(x, class)}

Class should be a string.

\item \code{chk_identical}: Check Identical

Checks if is identical to y using:

\code{\link{identical}(x, y)}

\item \code{chk_equal}: Check Equal

Checks if is equal (identical within tolerance) to y using:

\code{isTRUE(\link{all.equal}(x, y, tolerance))}

\item \code{chk_equivalent}: Check Equivalent

Checks if is equivalent (equal ignoring attributes) to y using:

\code{\link{isTRUE}(\link{all.equal}(x, y, tolerance, check.attributes = FALSE))}

\item \code{chk_all_identical}: Check All Identical

Checks all elements in x identical using:

\code{all(vapply(x, identical, TRUE, y = x[[1]]))}

\item \code{chk_all}: Check All

Checks all elements using:

\code{all(vapply(x, chk_fun, TRUE, ...))}

\item \code{chk_lt}: Check Less Than

Checks if all non-missing values are less than value using:

\code{all(x[!is.na(x)] < value))}

\code{value} should be a non-missing scalar.

\item \code{chk_lte}: Check Less Than or Equal To

Checks if all non-missing values are less than or equal to y using:

\code{all(x[!is.na(x)] <= value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gt}: Check Greater Than

Checks if all non-missing values are greater than value using:

\code{all(x[!is.na(x)] > value))}

\code{value} should be a non-missing scalar.

\item \code{chk_gte}: Check Greater Than or Equal To

Checks if all non-missing values are greater than or equal to y using:

\code{all(x[!is.na(x)] >= value))}

\code{value} should be a non-missing scalar.

\item \code{chk_range}: Check Range

Checks if all non-missing values fall within range using:

\code{all(x[!is.na(x)] >= range[1] & x[!is.na(x)] <= range[2])}

Range should be a non-missing sorted vector of length 2.

\item \code{chk_in}: Check In

Checks if all values in values using equivalent of:

\code{all(\link{match}(x, values, nomatch = 0) > 0)}

\item \code{chk_match}: Check Matches

Checks if all values match regular expression using:

\code{all(\link{grepl}(regexp, x))}

\code{regexp} should be a non-missing character scalar.

\item \code{chk_dir}: Check Directories Exist

Checks if directories exist using:

\code{all(\link{dir.exists}(x))}

\item \code{chk_file}: Check Files Exist

Checks if files exist using:

\code{all(\link{file.exists}(x) && !dir.exists(x))}

\item \code{chk_dirs}: Check Directories Exist (DEPRECATED)

Checks if directories exist using:

\code{all(\link{dir.exists}(x))}

\item \code{chk_files}: Check Files Exist (DEPRECATED)

Checks if files exist using:

\code{all(\link{file.exists}(x) && !dir.exists(x))}
}}

\examples{

# chk_true
try(chk_true(1))
try(chk_true(NA))
try(chk_true(FALSE))
chk_true(TRUE)
try(chk_true(c(TRUE, TRUE)))

# chk_false
try(chk_false(0))
try(chk_false(NA))
try(chk_false(TRUE))
chk_false(FALSE)
try(chk_false(c(FALSE, FALSE)))


# chk_flag
try(chk_flag(1))
try(chk_flag(NA))
chk_flag(TRUE)
chk_flag(FALSE)
try(chk_flag(c(TRUE, TRUE)))


# chk_lgl
try(chk_lgl(1))
chk_lgl(NA)
chk_lgl(TRUE)
chk_lgl(FALSE)
try(chk_lgl(c(TRUE, TRUE)))


# chk_number
try(chk_number(TRUE))
chk_number(1.1)
chk_number(1L)
try(chk_number(NA_real_))
try(chk_number(c(1.1, 1.1)))


# chk_proportion
try(chk_proportion(1.1))
chk_proportion(0.5)
chk_proportion(1L)
try(chk_proportion(NA_real_))
try(chk_proportion(c(0.5, 0.5)))
 

# chk_whole_number
try(chk_whole_number(1.1))
chk_whole_number(2)
chk_whole_number(2L)
try(chk_whole_number(NA_integer_))
try(chk_whole_number(c(2L, 2L)))
  

# chk_count
try(chk_count(-1))
chk_count(0)
chk_count(1L)
try(chk_count(NA_integer_))
try(chk_count(c(2L, 2L)))


# chk_string
try(chk_string(1))
chk_string("1")
chk_string("")
try(chk_string(NA_character_))
try(chk_string(c("1", "1")))
 

# chk_date
try(chk_date(1))
try(chk_date("2001-01-02"))
chk_date(as.Date("2001-01-02"))
chk_date(Sys.Date())
try(chk_date(Sys.time()))
try(chk_date(c(Sys.Date(), Sys.Date())))
  

# chk_datetime
try(chk_datetime(1))
try(chk_datetime("2001-01-02"))
chk_datetime(as.POSIXct("2001-01-02"))
try(chk_datetime(Sys.Date()))
chk_datetime(Sys.time())
try(chk_datetime(c(Sys.time(), Sys.time())))
   

# chk_length
try(chk_length(numeric(0)))
try(chk_length(1:2))
chk_length(1)
chk_length(NA_character_)
chk_length(Sys.Date())
chk_length(Sys.time())
chk_length(1:2, length = 2)
  

# chk_whole_numeric
try(chk_whole_numeric(TRUE))
try(chk_whole_numeric(1.5))
chk_whole_numeric(1)
chk_whole_numeric(NA_real_)
chk_whole_numeric(1:2)
chk_whole_numeric(double(0))
   

# chk_no_missing
try(chk_no_missing(NA))
try(chk_no_missing(c(1, NA)))
chk_no_missing(character(0))
chk_no_missing(1)
chk_no_missing(1:10)
  

# chk_unique
chk_unique(NULL)
chk_unique(numeric(0))
chk_unique(c(NA, 2))
try(chk_unique(c(NA, NA, 2)))
chk_unique(c(NA, NA, 2), incomparables = NA)


# chk_null
try(chk_null(1))
chk_null(NULL)


# chk_not_null
try(chk_not_null(NULL))
chk_not_null(1)


# chk_named
try(chk_named(1))
try(chk_named(list(1)))
chk_named(c(x = 1))
chk_named(list(x = 1))
chk_named(c(x = 1)[-1])
chk_named(list(x = 1)[-1])
 

# chk_unused
fun <- function(x, ...) { chk_unused(...); x }
fun(1)
try(fun(1,2))
 

# chk_used
fun <- function(x, ...) { chk_used(...); x }
try(fun(1))
fun(1,2)


# chk_function
try(chk_function(1))
try(chk_function(list(1)))
chk_function(mean)
chk_function(function(x) x)
 

# chk_list
try(chk_list(1))
try(chk_list(NULL))
chk_list(list())
chk_list(list(x = 1))
chk_list(mtcars)
 

# chk_is
try(chk_is(1, "character"))
try(chk_is(NULL, "numeric"))
chk_is(numeric(0), "numeric")
chk_is(1, "numeric")
chk_is(NA_real_, "numeric")
 

# chk_identical
try(chk_identical(1, 1L))
chk_identical(1, 1)
try(chk_identical(1, c(1,1)))
chk_identical(c(1,1), c(1,1))
 

# chk_equal
try(chk_equal(1, 1.0000001))
chk_equal(1, 1.00000001)
chk_equal(1, 1L)
try(chk_equal(c(x = 1), c(y = 1L)))
chk_equal(c(x = 1), c(x = 1L))
 

# chk_equivalent
try(chk_equivalent(1, 1.0000001))
chk_equivalent(1, 1.00000001)
chk_equivalent(1, 1L)
chk_equivalent(c(x = 1), c(y = 1L))
chk_equivalent(c(x = 1), c(x = 1L))
 

# chk_all_identical
try(chk_all_identical(1, 1.0000001))
chk_all_identical(1, 1.00000001)
chk_all_identical(1, 1L)
try(chk_all_identical(c(1,2)))
try(chk_all_identical(c(1,2.0000001)))
 

# chk_all
try(chk_all(1, chk_lgl))
chk_all(TRUE, chk_lgl)
chk_all(c(TRUE, NA), chk_lgl)
chk_all(numeric(0), chk_lgl)
 

# chk_lt
chk_lt(numeric(0))
try(chk_lt(0))
chk_lt(-0.1)
chk_lt(c(-0.1, -0.2, NA))
try(chk_lt(c(-0.1, 0.2)))
chk_lt(c(-0.1, 0.2), value = 1)
chk_lt("a", value = "b")
 

# chk_lte
chk_lte(numeric(0))
chk_lte(0)
try(chk_lte(0.1))
chk_lte(c(-0.1, -0.2, NA))
try(chk_lte(c(-0.1, -0.2, NA), value = -1))
 

# chk_gt
chk_gt(numeric(0))
try(chk_gt(0))
chk_gt(0.1)
chk_gt(c(0.1, 0.2, NA))
try(chk_gt(c(0.1, -0.2)))
chk_gt(c(-0.1, 0.2), value = -1)
chk_gt("b", value = "a")
 

# chk_gte
chk_gte(numeric(0))
chk_gte(0)
try(chk_gte(-0.1))
chk_gte(c(0.1, 0.2, NA))
try(chk_gte(c(0.1, 0.2, NA), value = 1))
 

# chk_range
chk_range(numeric(0))
chk_range(0)
try(chk_range(-0.1))
chk_range(c(0.1, 0.2, NA))
chk_range(c(0.1, 0.2, NA), range = c(0,1))


# chk_in
chk_in(numeric(0), 1:10)
chk_in(1, 1:10)
try(chk_in(11, 1:10))

# chk_match
try(chk_match(""))
chk_match("1")
try(chk_match("1", regexp = "2"))
try(chk_match(NA_character_, regexp = ".*"))
chk_match(c("a"), regexp = ".*")

# chk_dir
try(chk_dir(tempfile()))

# chk_file
try(chk_file(tempfile()))
}
